AWSTemplateFormatVersion: '2010-09-09'
Description: 'Hashicorp Vault Container with DynamoDB Backend'
Parameters:
  VaultSecretsStore:
    Type: Number
    Default: 10
    Description: The number of Vault Secret Shards
  VaultSecretsThreshold:
    Type: Number
    Default: 3
    Description: The number of Vault Secret Thresholds
  VaultRecoveryStore:
    Type: Number
    Default: 10
    Description: The number of Vault Recovery Shards
  VaultRecoveryThreshold:
    Type: Number
    Default: 3
    Description: The number of Vault Recovery Thresholds
  VaultInitiatorImageTag:
    Type: String
    Description: Docker Repository Image URL for Vault Initiator
  VaultImageTag:
    Type: String
    Description: Docker Repository Image URL for Hashicorp Vault
  HVaultKmsAutoUnsealKeyAdmin:
    Type: String
    Description: Arn for Key Administrator
  EndpointCertificate:
    Type: String
    Description: Type in the Certificate ARN that you intend to use
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that has at least one subnet with access to internet and another with access from internet.
  ECSSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two private subnets in your selected VPC for the Containers.
  ALBSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two public subnets in your selected VPC, same zones as the private subnets.
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  HAEnabled:
    Description: Set to true to enable ad false to disable HA for DynamoDB
    Type: String
    Default: 'true'
  VaultOption3RolePrefix:
    Description: Set the prefix of HVaultTrusted Roles
    Type: String
    Default: 'HVaultRoleOption3'
  VaultConsumerNamespace1:
    Description: Set the name of a Vault consumer namespace 1
    Type: String
    Default: 'ns1'
  VaultConsumerNamespace2:
    Description: Set the name of a Vault consumer namespace 2
    Type: String
    Default: 'ns2'
  VaultAWSAccountID1:
    Description: Set the AWS account ID for a vault consumer 1
    Type: String
  VaultAWSAccountID2:
    Description: Set the AWS account ID for a vault consumer 2
    Type: String

Conditions:
  IsConsumer1Available: !And
    - !Not [!Equals ["",!Ref VaultConsumerNamespace1]]
    - !Not [!Equals ["",!Ref VaultAWSAccountID1]]
  IsConsumer2Available: !And
    - !Not [!Equals ["",!Ref VaultConsumerNamespace1]]
    - !Not [!Equals ["",!Ref VaultAWSAccountID1]]

Resources:
  HVaultECSCluster:
    Type: AWS::ECS::Cluster
  HVaultALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId
  HvaultALBSGHTTPSInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref HVaultALBSG
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  HvaultALBSGHTTPInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref HVaultALBSG
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  HVaultECSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
  HVaultECSSGContainerInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref HVaultECSSG
      IpProtocol: tcp
      FromPort: '8200'
      ToPort: '8200'
      SourceSecurityGroupId: !GetAtt HVaultALBSG.GroupId
  HVaultCloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 3
  HVaultECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Join ['', [!Ref 'AWS::StackName', -task]]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt HVaultECSExecServiceRole.Arn
      TaskRoleArn: !GetAtt HVaultECSTaskServiceRole.Arn
      Cpu: '2048'
      Memory: '4096'
      ContainerDefinitions:
      - Name: hvault-svc
        Essential: 'true'
        Image: !Ref VaultImageTag
        Environment:
          - Name: "AWS_DYNAMODB_TABLE"
            Value: !Ref HVaultTable
          - Name: "DYNAMODB_HA_ENABLED"
            Value: !Ref HAEnabled
          - Name: "VAULT_SEAL_TYPE"
            Value: "awskms"
          - Name: "VAULT_AWSKMS_SEAL_KEY_ID"
            Value: !Ref HVaultKmsAutoUnsealKey
          - Name: "VAULT_LOCAL_CONFIG"
            Value: "{\"storage\":{\"dynamodb\":{}},\"listener\":{\"tcp\":{\"address\":\"0.0.0.0:8200\",\"tls_disable\":1}},\"ui\":true,\"disable_mlock\":true}"
          - Name: "SKIP_SETCAP"
            Value: "true"
          - Name: "VAULT_API_ADDR"
            Value: !Sub
              - https://${hvaultalbendpoint}
              - { hvaultalbendpoint: !GetAtt HVaultALB.DNSName}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'HVaultCloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: hvault-svc
        PortMappings:
        - ContainerPort: 8200
        Command: ['server']
      - Name: hvault-setup
        Essential: false
        DependsOn:
          - Condition: "START"
            ContainerName: "hvault-svc"
        Image: !Ref VaultInitiatorImageTag
        Environment:
          - Name: "VAULT_ADDR"
            Value: "http://localhost:8200"
          - Name: "VAULT_SECRETS_S"
            Value: !Ref VaultSecretsStore
          - Name: "VAULT_SECRETS_T"
            Value: !Ref VaultSecretsThreshold
          - Name: "VAULT_RECOVERY_S"
            Value: !Ref VaultRecoveryStore
          - Name: "VAULT_RECOVERY_T"
            Value: !Ref VaultRecoveryThreshold
          - Name: "AWS_SM_RECOVERY_KEYS"
            Value: !Ref HVaultRecoveryKey
          - Name: "AWS_SM_ROOT_TOKEN"
            Value: !Ref HVaultRootKey
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref HVaultCloudwatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: hvault-setup
  HVaultALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref 'ALBSubnetIds'
      SecurityGroups:
        -
          !Ref 'HVaultALBSG'
  HVaultALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - HVaultECSTaskServiceRole
      - HVaultECSExecServiceRole
    Properties:
      Certificates:
        -
          CertificateArn: !Ref 'EndpointCertificate'
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'HVaultALBTargetGroup'
      LoadBalancerArn: !Ref 'HVaultALB'
      Port: '443'
      Protocol: HTTPS
  HVaultALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: HVaultALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref HVaultALBTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref HVaultALBListener
      Priority: 1
  HVaultServerListenerRedirectToHTTPS:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref HVaultALB
      Port: 80
      Protocol: "HTTP"
  HVaultALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: HVaultALB
    Properties:
      TargetType: 'ip'
      VpcId: !Ref VpcId
      Port: 8200
      Protocol: HTTP
      Matcher:
        HttpCode: 200-499
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/sys/health?activecode=200&standbycode=200&sealedcode=200&uninitcode=200
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  HVaultECSService:
    Type: AWS::ECS::Service
    DependsOn: HVaultALBListener
    Properties:
      Cluster: !Ref 'HVaultECSCluster'
      DesiredCount: !Ref DesiredCapacity
      LaunchType: 'FARGATE'
      LoadBalancers:
        - ContainerName: hvault-svc
          ContainerPort: '8200'
          TargetGroupArn: !Ref 'HVaultALBTargetGroup'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'DISABLED'
          SecurityGroups:
            - !Ref 'HVaultECSSG'
          Subnets: !Ref 'ECSSubnetIds'
      ServiceName: 'hvault-svc'
      TaskDefinition: !Ref 'HVaultECSTask'
  HVaultTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Path"
          AttributeType: "S"
        - AttributeName: "Key"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Path"
          KeyType: "HASH"
        - AttributeName: "Key"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: hvault-data
  HVaultKmsAutoUnsealKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Vault Seal/Unseal key"
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: kms:*
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Ref HVaultKmsAutoUnsealKeyAdmin
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              # If the Lambda Functions need to use this key we must add their execution roles here as principles
              AWS:
                - !GetAtt HVaultECSExecServiceRole.Arn
                - !GetAtt HVaultECSTaskServiceRole.Arn
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
  HVaultRootKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "hvault-root-key"
      Description: "Vault Root key"
      SecretString: "empty"
  HVaultRecoveryKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "hvault-recovery-key"
      Description: "Vault Recovery keys"
      SecretString: "empty"
  HVaultECSExecServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com,ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: hvault-svc-db
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "dynamodb:DescribeLimits",
                    "dynamodb:DescribeTimeToLive",
                    "dynamodb:ListTagsOfResource",
                    "dynamodb:DescribeReservedCapacityOfferings",
                    "dynamodb:DescribeReservedCapacity",
                    "dynamodb:ListTables",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:CreateTable",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:Scan",
                    "dynamodb:DescribeTable"
                  ]
                Resource: !GetAtt HVaultTable.Arn
        - PolicyName: hvault-svc-aws
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: iam:GetRole
                Resource: !Sub
                  - arn:aws:iam::${AWS::AccountId}:role/{role_prefix}*
                  - role_prefix: !Ref VaultOption3RolePrefix
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: arn:aws:iam::*:role/HVault*
                Condition:
                  StringEquals:
                    aws:ResourceTag/vault-access: !Sub "${AWS::AccountId}"
  HVaultECSTaskServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com,ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: hvault-svc-ecs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['elasticloadbalancing:DeregisterTargets',
                         'elasticloadbalancing:Describe*',
                         'elasticloadbalancing:RegisterTargets']
                Resource: '*'
        - PolicyName: hvault-svc-db
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "dynamodb:DescribeLimits",
                    "dynamodb:DescribeTimeToLive",
                    "dynamodb:ListTagsOfResource",
                    "dynamodb:DescribeReservedCapacityOfferings",
                    "dynamodb:DescribeReservedCapacity",
                    "dynamodb:ListTables",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:CreateTable",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:Scan",
                    "dynamodb:DescribeTable"
                  ]
                Resource: !GetAtt HVaultTable.Arn
        - PolicyName: hvault-svc-secrets
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['secretsmanager:UpdateSecret']
                Resource: [
                    !Ref 'HVaultRecoveryKey',
                    !Ref 'HVaultRootKey'
                  ]
  HVaultOption3RoleNameSpace1:
    Type: AWS::IAM::Role
    Condition: IsConsumer1Available
    Properties:
      RoleName: !Sub
        - ${role_prefix}_${namespace}
        - role_prefix: !Ref VaultOption3RolePrefix
          namespace: !Ref VaultConsumerNamespace1
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${consumer_account}:root
                - consumer_account: !Ref VaultAWSAccountID1
            Action:
              - sts:AssumeRole
  HVaultOption3RoleNameSpace2:
    Type: AWS::IAM::Role
    Condition: IsConsumer2Available
    Properties:
      RoleName: !Sub
        - ${role_prefix}_${namespace}
        - role_prefix: !Ref VaultOption3RolePrefix
          namespace: !Ref VaultConsumerNamespace2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${consumer_account}:root
                - consumer_account: !Ref VaultAWSAccountID2
            Action:
              - sts:AssumeRole

Outputs:
  HVaultECSEndpoint:
    Description: Your ALB DNS URL
    Value: !Join ['', ['https://',!GetAtt HVaultALB.DNSName]]
    Export:
      Name: !Sub "${AWS::StackName}-endpoint"
  HVaultOption3RoleConsumer1:
    Condition: IsConsumer1Available
    Description: Vault Option 3 Consumer 1 Role ARN
    Value: !GetAtt HVaultOption3RoleNameSpace1.Arn
    Export:
      Name: !Sub "${AWS::StackName}-option3-role1-arn"
  HVaultOption3RoleConsumer2:
    Condition: IsConsumer2Available
    Description: Vault Option 3 Consumer 2 Role ARN
    Value: !GetAtt HVaultOption3RoleNameSpace2.Arn
    Export:
      Name: !Sub "${AWS::StackName}-option3-role2-arn"
  HVaultRootToken:
    Description: RootToken Key
    Value: !Ref HVaultRootKey